#include "GPUChecks.h"
#include "CPUChecks.h"
#include "Logger.h"
#include "nlohmann/json.hpp"
#include <fstream>
#include <filesystem>
#include "UEFICheck.h"
#include "Globals.h"
#include "SystemType.h"
#include "StorageCheck.h"
#include "NetworkCheck.h"

#define _CRT_SECURE_NO_WARNINGS

bool silent = false;
bool isFullySupported = false;
bool isPartiallySupported = false;
bool isNotSupported = false;
bool isCPUSupportedc = false;
bool isGPUSupportedc = false;
bool help = false;

void dumpHardwareDetails(const CPUInfo& cpu, const NetworkInfo& network, const StorageInfo& storage, const std::string& gpuModel, const std::string& supportedMac) {
    std::filesystem::path documentsPath = std::filesystem::path(getenv("USERPROFILE")) / "Documents" / "MacBuilder";
    std::filesystem::create_directories(documentsPath);

    nlohmann::json hardwareDetails = {
        {"CPU", {
            {"name", cpu.name},
            {"is64Bit", cpu.is64Bit},
            {"supportsSSE3", cpu.supportsSSE3},
            {"supportsSSE4", cpu.supportsSSE4},
            {"supportsSSE42", cpu.supportsSSE42},
            {"cores", cpu.cores},
            {"isAMD", cpu.isAMD},
            {"isCPUSupported", isCPUSupportedc}
        }},
        {"GPU", {
            {"model", gpuModel},
            {"isGPUSupported", isGPUSupportedc}
        }},
        {"Storage", {
             {"name", storage.adaptername},
        }},
        {"Network", {
             {"name", network.adaptername},
        }},
        {"Computer", {
            {"SystemType", checkSystemType()},
            {"CodeName", cpu.codename}
        }},
        {"Supported", {
            {"IsFullySupported", isFullySupported},
            {"IsPartiallySupported", isPartiallySupported},
            {"SupportedMacVersions", supportedMac},
            {"IsNotSupported", isNotSupported},
            {"isUEFISupported", isUEFISupported()}
        }},
        {"Dump", {
            {"Version", version},
            {"Credits", "Generated by MHC for MacBuilder (https://github.com/KivieDev/MacBuilder)"},
            {"Warning", "If you are dumping for MacBuilder, do NOT modify the file, doing so will cause issues."}
        }}
    };

    std::ofstream file(documentsPath / "hardware_dump.json");
    if (file.is_open()) {
        file << hardwareDetails.dump(4);
        Logger::getInstance().log(LogLevel::INFO, "Hardware details dumped to " + (documentsPath / "hardware_dump.json").string());
    }
    else {
        Logger::getInstance().log(LogLevel::Error, "Failed to open file for writing: " + (documentsPath / "hardware_dump.json").string());
    }
}

int main() {
    int argc;
    wchar_t** argv = CommandLineToArgvW(GetCommandLineW(), &argc);
    bool dumpDetails = false;

    for (int i = 0; i < argc; ++i) {
        std::wstring arg = argv[i];
        if (arg == L"--silent") {
            silent = true;
            Logger::getInstance().enableConsoleLogging(false);
        }
        else if (arg == L"--dump") {
            dumpDetails = true;
        }
        else if (arg == L"--info") {
            std::cout << "Created by Kivie @ 2024 all rights reserved for MacBuilder (more info here: https://github.com/KivieDev/MacBuilder).\nVersion: " << version << std::endl;
            help = true;
        }
        else if (arg == L"--help") {
            std::cout << "--silent: Runs without logging or pausing.\n"
                "--dump: Dumps JSON containing hardware info to /Documents/MacBuilder.\n"
                "--info: More information about this program." << std::endl;
            help = true;
        }
    }

    LocalFree(argv);

    std::wstring title = L"MacBuilder Hardware Compatibility Checker - v" + std::wstring(version.begin(), version.end());
    SetConsoleTitle(title.c_str());

    if (help) {
        return 0;
    }

    Logger::getInstance().log(LogLevel::INFO, "Init, Created/Developed by Kivie (https://github.com/KivieDev) @ 2024 all rights reserved.");

    std::string gpuModel = trimSpaces(detectGPU());
    CPUInfo cpu = getCPUInfo();

    NetworkInfo network = checkNetworkAdapterSupport();
    StorageInfo storage = checkStorageSupport();

    cpu.name = trimSpaces(cpu.name);

    Logger::getInstance().log(LogLevel::INFO, "Detected CPU: " + cpu.name);
    Logger::getInstance().log(LogLevel::INFO, "Detected GPU: " + gpuModel);

    bool isCPUSupported = checkCPUSupport(cpu);
    bool isGPUSupported = checkGPU(gpuModel);

    if (isCPUSupported && isGPUSupported) {
        std::string macOSSupport = getSupportedMacOSVersion(gpuModel);
        Logger::getInstance().log(LogLevel::INFO, "Checking macOS compatibility for GPU...");
        Logger::getInstance().log(LogLevel::INFO, macOSSupport);
        isCPUSupportedc = true;
        isGPUSupportedc = true;
        isFullySupported = true;
        Logger::getInstance().log(LogLevel::INFO, "Your hardware fully supports MacBuilder!");
    }
    else {
        if (!isCPUSupported) {
            isCPUSupportedc = true;
            Logger::getInstance().log(LogLevel::WARNING, "The CPU is NOT supported, but the GPU is supported. Partial support detected.");
        }
        if (!isGPUSupported) {
            isGPUSupportedc = true;
            Logger::getInstance().log(LogLevel::WARNING, "The GPU is NOT supported, but the CPU is supported. Partial support detected.");
        }
        if (!isCPUSupported && !isGPUSupported) {
            isNotSupported = true;
        }
    }

    if (dumpDetails) {
        std::string macOSSupportStr = getSupportedMacOSVersionC(gpuModel);
        dumpHardwareDetails(cpu, network, storage, gpuModel, macOSSupportStr);
    }

    if (!silent) {
        system("pause");
    }

    return 0;
}
